#!/usr/bin/python

"""
This script creates template Debian packages for programs and libraries
built with Leiningen. It makes use of leinpkh.Project to parse the
Leiningen configuration file and populates the debian folder using
jinja templates.
"""

from jinja2 import Environment, FileSystemLoader
from leinpkg import Project
import subprocess
import argparse
from subprocess import call
import os


def _render_write(env, template_name, filename, context):
    """
    Loads a template from a jinja environment, renders the template with a
    context and writes the output to a file
    """

    template = env.get_template(template_name)
    f = open(filename, 'w')
    f.write(template.render(context))
    f.close()

#Setup argument parsing
argparser = argparse.ArgumentParser()

argparser.add_argument('-p', '--package', help=('Set the package name '
                       '(defaults to Leiningen project name)'))

argparser.add_argument('-m', '--maintainer', help=('Set the maintainer name '
                       '(defaults to DEBFULLNAME)'))

argparser.add_argument('-e', '--email', help=('Set the maintainer email '
                       '(defaults to DEBEMAIL)'))

argparser.add_argument('-v', '--version', help=('Set the package version '
                       '(defaults to Leiningen project version)'))

#Create a jinja environment to load the templates
template_env = Environment(loader=FileSystemLoader('./templates'),
                           trim_blocks=True)

#This dictionary will hold all project variables used in templates
project = dict()

#Load arguments
args = vars(argparser.parse_args())

project['package_name'] = args['package']
project['maintainer_name'] = args['maintainer']
project['maintainer_email'] = args['email']
project['version'] = args['version']

#Create the debian folder
if not os.path.exists('debian'):
    os.makedirs('debian')

#Generate a pom file of the project in order to read the project attributes
if not os.path.exists('pom.xml'):
    call(['lein', 'pom'])

os.rename('pom.xml', 'debian/pom.xml')

#Create a Project instance
config = Project('debian/pom.xml')


if not project['maintainer_name']:
    project['maintainer_name'] = os.environ.get('DEBFULLNAME', '')
if not project['maintainer_email']:
    project['maintainer_email'] = os.environ.get('DEBEMAIL', '')

#Load date
project['date'] = subprocess.check_output(["date", "-R"])

#Fill in some dummy project variables
project['source_name'] = config.name.replace('.', '-')
if not project['package_name']:
    project['package_name'] = 'lib%s-clojure' % project['source_name']
if not project['version']:
    project['version'] = config.version
project['dependencies'] = config.dependencies
project['genfiles'] = [project['source_name'] + '.jar']
project['homepage'] = config.url
project['fullpath_deps'] = map(lambda x: '/usr/share/java/'+x+'.jar',
                               config.dependencies)

#Create the debian/source folder
if not os.path.exists('debian/source'):
    os.makedirs('debian/source')

#create the changelog file
maintainer_env = 'DEBFULLNAME="' + project['maintainer_name'] + '" '
maintainer_env += 'DEBEMAIL="' + project['maintainer_email'] + '"'

call('%s dch --create --package %s --newversion %s Initial Release' %
    (maintainer_env, project['package_name'], project['version'] + '-1'),
     shell=True)

#Create the source/format file
_render_write(template_env, 'sourceformat', 'debian/source/format',
              project)

#Create the control file
_render_write(template_env, 'control', 'debian/control', project)

#create the compat file
_render_write(template_env, 'compat', 'debian/compat', project)

#create the copyright file
_render_write(template_env, 'copyright', 'debian/copyright', project)

#create the rules file
_render_write(template_env, 'rules', 'debian/rules', project)

#create the classpath file
_render_write(template_env, 'package.classpath', 'debian/' +
              project['package_name']+'.classpath', project)

#create the document files
_render_write(template_env, 'package.doc-base', 'debian/' +
              project['package_name']+'.doc-base', project)

_render_write(template_env, 'package.docs', 'debian/' +
              project['package_name']+'.docs', project)
