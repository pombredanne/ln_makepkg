#!/usr/bin/python

"""
This script creates template Debian packages for programs and libraries
built with Leiningen. It makes use of leinpkg.Project to parse the
Leiningen configuration file and populates the debian folder using
jinja templates.
"""

from leinpkg.tools import Project, DebianTemplates
import argparse
from subprocess import call, Popen, PIPE
import os
import re


#Setup argument parsing
argparser = argparse.ArgumentParser()

argparser.add_argument('-p', '--package', help=('Set the package name '
                       '(defaults to Leiningen project name)'))

argparser.add_argument('-m', '--maintainer', help=('Set the maintainer name '
                       '(defaults to DEBFULLNAME)'))

argparser.add_argument('-e', '--email', help=('Set the maintainer email '
                       '(defaults to DEBEMAIL)'))

argparser.add_argument('-v', '--version', help=('Set the package version '
                       '(defaults to Leiningen project version)'))

argparser.add_argument('-i', '--itp', help=('Set the itp bug number that this '
                       'package should close'))

argparser.add_argument('--guess-itp', help=('Fetch the itp bug number from'
                       ' wnpp (Requires wnpp-check)'), dest='guess_itp',
                       action='store_true')

#Create an instance of DebianTemplates which will help us deal with templates
deb_templates = DebianTemplates()

#This dictionary will hold all project variables used in templates
project = dict()

#Load arguments
args = vars(argparser.parse_args())

project['package_name'] = args['package']
project['maintainer_name'] = args['maintainer']
project['maintainer_email'] = args['email']
project['version'] = args['version']
project['itp_bug'] = args['itp']

#Create the debian folder
if not os.path.exists('debian'):
    os.makedirs('debian')

#Generate a pom file of the project in order to read the project attributes
if not os.path.exists('pom.xml'):
    call(['lein', 'pom'])

os.rename('pom.xml', 'debian/pom.xml')

#Create a Project instance
config = Project('debian/pom.xml')


if not project['maintainer_name']:
    project['maintainer_name'] = os.environ.get('DEBFULLNAME', '')
if not project['maintainer_email']:
    project['maintainer_email'] = os.environ.get('DEBEMAIL', '')

if not project['itp_bug']:
    project['itp_bug'] = 'XXXXXX'

#Fill in some dummy project variables
project['source_name'] = config.name.replace('.', '-') + '-clojure'
if not project['package_name']:
    project['package_name'] = 'lib' + project['source_name']
if not project['version']:
    project['version'] = config.version
project['dependencies'] = config.dependencies
project['genfiles'] = [config.name.replace('.', '-') + '.jar']
project['homepage'] = config.url
project['fullpath_deps'] = map(lambda x: '/usr/share/java/'+x+'.jar',
                               config.dependencies)

#Check itp bug number from wnpp
if args['guess_itp']:
    wnpp = Popen(['wnpp-check', config.name.replace('.',, '-')],
                 stdout=PIPE).communicate()[0]
    result = re.search(r'\(ITP - #([0-9]+)\)', wnpp)
    if result:
        project['itp_bug'] = result.group(1)

#Create the debian/source folder
if not os.path.exists('debian/source'):
    os.makedirs('debian/source')

#create the changelog file
maintainer_env = 'DEBFULLNAME="' + project['maintainer_name'] + '" '
maintainer_env += 'DEBEMAIL="' + project['maintainer_email'] + '"'
changelog_message = r'Initial Release. \(Closes: \#%s\)' % project['itp_bug']

call('%s dch --create --package %s --newversion %s %s' %
    (maintainer_env, project['source_name'], project['version'] + '-1',
     changelog_message), shell=True)

#Create the source/format file
deb_templates.render_write('sourceformat', 'debian/source/format', project)

#Create the control file
deb_templates.render_write('control', 'debian/control', project)

#create the compat file
deb_templates.render_write('compat', 'debian/compat', project)

#create the copyright file
deb_templates.render_write('copyright', 'debian/copyright', project)

#create the rules file
deb_templates.render_write('rules', 'debian/rules', project)

#create the classpath file
deb_templates.render_write('package.classpath', 'debian/' +
                           project['package_name']+'.classpath', project)

#create the document files
deb_templates.render_write('package.doc-base', 'debian/' +
                           project['package_name']+'.doc-base', project)

deb_templates.render_write('package.docs', 'debian/' +
                           project['package_name']+'.docs', project)
