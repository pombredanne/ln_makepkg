#!/usr/bin/python

"""
This script creates template Debian packages for programs and libraries
built with Leiningen. It makes use of leinpkh.Project to parse the
Leiningen configuration file and populates the debian folder using
jinja templates.
"""

from jinja2 import Environment, FileSystemLoader
from leinpkg import Project
import subprocess
from subprocess import call
import os


def _render_write(env, template_name, filename, context):
    """
    Loads a template from a jinja environment, renders the template with a
    context and writes the output to a file
    """

    template = env.get_template(template_name)
    f = open(filename, 'w')
    f.write(template.render(context))
    f.close()

#Create a jinja environment to load the templates
template_env = Environment(loader=FileSystemLoader('./templates'),
                           trim_blocks=True)

#This dictionary will hold all project variables used in templates
project_vars = dict()

#Create the debian folder
if not os.path.exists('debian'):
    os.makedirs('debian')

#Generate a pom file of the project in order to read the project attributes
if not os.path.exists('pom.xml'):
    call(['lein', 'pom'])

os.rename('pom.xml', 'debian/pom.xml')

#Create a Project instance
project = Project('debian/pom.xml')

#Load maintainer name and email from env variables
if 'DEBFULLNAME' in os.environ:
    project_vars['maintainer_name'] = os.environ['DEBFULLNAME']
if 'DEBEMAIL' in os.environ:
    project_vars['maintainer_email'] = os.environ['DEBEMAIL']

#Load date
project_vars['date'] = subprocess.check_output(["date", "-R"])

#Fill in some dummy project variables
project_vars['source_name'] = project.name.replace('.', '-')
project_vars['homepage'] = project.url
project_vars['package_name'] = 'lib' + project_vars['source_name'] + '-clojure'
project_vars['genfiles'] = [project_vars['source_name'] + '.jar']
project_vars['version'] = project.version
project_vars['dependencies'] = project.dependencies
project_vars['fullpath_deps'] = map(lambda x: "/usr/share/java/"+x+".jar",
                                    project.dependencies)

#Create the debian/source folder
if not os.path.exists('debian/source'):
    os.makedirs('debian/source')

#create the changelog file
call('dch --create --package %s --newversion %s Initial Release' %
    (project_vars['package_name'], project_vars['version'] + '-1'),
     shell=True)

#Create the source/format file
_render_write(template_env, 'sourceformat', 'debian/source/format',
              project_vars)

#Create the control file
_render_write(template_env, 'control', 'debian/control', project_vars)

#create the compat file
_render_write(template_env, 'compat', 'debian/compat', project_vars)

#create the copyright file
_render_write(template_env, 'copyright', 'debian/copyright', project_vars)

#create the rules file
_render_write(template_env, 'rules', 'debian/rules', project_vars)

#create the classpath file
_render_write(template_env, 'package.classpath', 'debian/' +
              project_vars['package_name']+'.classpath', project_vars)

#create the document files
_render_write(template_env, 'package.doc-base', 'debian/' +
              project_vars['package_name']+'.doc-base', project_vars)

_render_write(template_env, 'package.docs', 'debian/' +
              project_vars['package_name']+'.docs', project_vars)
